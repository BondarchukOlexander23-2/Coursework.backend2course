<?php

require_once __DIR__ . '/../BaseView.php';

class SurveyEditView extends BaseView
{
    protected function content(): string
    {
        $survey = $this->get('survey');
        $questions = $this->get('questions', []);
        $categories = $this->get('categories', []);

        $questionsHtml = '';
        if (!empty($questions)) {
            foreach ($questions as $question) {
                $questionsHtml .= $this->renderQuestionItem($question);
            }
        } else {
            $questionsHtml = '<p>–©–µ –Ω–µ–º–∞—î –ø–∏—Ç–∞–Ω—å. –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∏–∂—á–µ.</p>';
        }

        $categorySection = $this->renderCategorySection($survey, $categories);

        return "
        <div class='container'>
            <div class='header-actions'>
                <h1>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: " . $this->escape($survey['title']) . "</h1>
                " . $this->component('Navigation') . "
            </div>
            
            <div class='survey-edit-sections'>
                {$categorySection}
                
                <section class='existing-questions'>
                    <h2>–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è</h2>
                    <div class='questions-list'>
                        {$questionsHtml}
                    </div>
                </section>
                
                " . $this->renderRetakeManagementButton($survey['id']) . "
                
                <section class='add-question'>
                    <h2>–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è</h2>
                    " . $this->renderQuestionForm($survey['id']) . "
                </section>
            </div>
            
            <div class='page-actions'>
                <a href='/surveys/view?id={$survey['id']}' class='btn btn-primary'>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è</a>
                <a href='/surveys/results?id={$survey['id']}' class='btn btn-secondary'>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏</a>
                <a href='/surveys/export-results?id={$survey['id']}&format=csv' class='btn btn-secondary'>–ï–∫—Å–ø–æ—Ä—Ç CSV</a>
                <a href='/surveys/my' class='btn btn-secondary'>–ú–æ—ó –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è</a>
            </div>
            
            " . $this->renderEditScript() . "
            </div>";
    }
    private function renderCategorySection(array $survey, array $categories): string
    {
        if (empty($categories)) {
            return '<div class="category-info">–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ</div>';
        }

        // –ü–æ—Ç–æ—á–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è
        $currentCategoryName = '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó';
        $currentCategoryIcon = 'üìÅ';
        $currentCategoryColor = '#6c757d';

        if (!empty($survey['category_id'])) {
            foreach ($categories as $cat) {
                if ($cat['id'] == $survey['category_id']) {
                    $currentCategoryName = $cat['name'];
                    $currentCategoryIcon = $cat['icon'];
                    $currentCategoryColor = $cat['color'];
                    break;
                }
            }
        }

        // –í–∏–ø–∞–¥–∞—é—á–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        $categoryOptions = "<option value=''>-- –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó --</option>";
        foreach ($categories as $category) {
            $selected = (!empty($survey['category_id']) && $survey['category_id'] == $category['id']) ? ' selected' : '';
            $categoryOptions .= "<option value='{$category['id']}'{$selected}>{$category['icon']} " . $this->escape($category['name']) . "</option>";
        }

        return "
            <section class='category-management'>
                <h2>üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è</h2>
                
                <div class='current-category'>
                    <p><strong>–ü–æ—Ç–æ—á–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è:</strong></p>
                    <div class='category-display'>
                        <span class='category-badge' style='background-color: {$currentCategoryColor}'>
                            {$currentCategoryIcon} {$currentCategoryName}
                        </span>
                    </div>
                </div>
                
                <form method='POST' action='/surveys/update-category' id='categoryUpdateForm' class='category-form'>
                    <input type='hidden' name='survey_id' value='{$survey['id']}'>
                    
                    <div class='form-group'>
                        <label for='category_id'>–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞:</label>
                        <select id='category_id' name='category_id' class='form-control category-select'>
                            {$categoryOptions}
                        </select>
                    </div>
                    
                    <div class='form-actions'>
                        <button type='submit' class='btn btn-info'>
                            <span class='btn-icon'>üîÑ</span> –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                        </button>
                    </div>
                </form>
            </section>";
    }

    private function renderRetakeManagementButton(int $surveyId): string
    {
        $participants = Database::selectOne(
            "SELECT COUNT(DISTINCT user_id) as count FROM survey_responses WHERE survey_id = ? AND user_id IS NOT NULL",
            [$surveyId]
        );

        $participantCount = $participants['count'] ?? 0;

        if ($participantCount === 0) {
            return '';
        }

        return "
        <div class='retake-management-section'>
            <h3>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏</h3>
            <p>–£—á–∞—Å–Ω–∏–∫—ñ–≤: <strong>{$participantCount}</strong></p>
            <p>–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥–∞—Ç–∏ –¥–æ–∑–≤—ñ–ª –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–µ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –æ–∫—Ä–µ–º–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.</p>
            <a href='/surveys/retake-management?survey_id={$surveyId}' class='btn btn-info'>
                <span class='btn-icon'>üîÑ</span> –£–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
            </a>
        </div>";
    }

    private function renderQuestionItem(array $question): string
    {
        $questionType = $this->escape($question['question_type']);
        $questionText = $this->escape($question['question_text']);
        $required = $question['is_required'] ? ' (–æ–±–æ–≤\'—è–∑–∫–æ–≤–µ)' : '';
        $points = $question['points'] ?? 1;
        $correctAnswer = $this->escape($question['correct_answer'] ?? '');

        $optionsHtml = '';
        if (isset($question['options']) && !empty($question['options'])) {
            $optionsHtml = '<ul class="question-options">';
            foreach ($question['options'] as $option) {
                $correctMark = $option['is_correct'] ? ' ‚úì' : '';
                $correctClass = $option['is_correct'] ? ' class="correct-option"' : '';
                $optionsHtml .= '<li' . $correctClass . '>' . $this->escape($option['option_text']) . $correctMark . '</li>';
            }
            $optionsHtml .= '</ul>';
        }

        $correctAnswerHtml = '';
        if (!empty($correctAnswer)) {
            $correctAnswerHtml = '<p class="correct-answer">–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <strong>' . $correctAnswer . '</strong></p>';
        }

        return "
            <div class='question-item'>
                <div class='question-header'>
                    <h4>{$questionText}{$required} <span class='question-points'>({$points} –±.)</span></h4>
                    <span class='question-type'>" . Question::getQuestionTypes()[$questionType] . "</span>
                </div>
                {$optionsHtml}
                {$correctAnswerHtml}
                <form method='POST' action='/surveys/delete-question' style='display: inline;'>
                    <input type='hidden' name='question_id' value='{$question['id']}'>
                    <input type='hidden' name='survey_id' value='{$this->get('survey')['id']}'>
                    <button type='submit' class='btn btn-danger btn-sm' onclick='return confirm(\"–í–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è?\")'>–í–∏–¥–∞–ª–∏—Ç–∏</button>
                </form>
            </div>";
    }

    private function renderQuestionForm(int $surveyId): string
    {
        return "
                <form method='POST' action='/surveys/add-question' id='questionForm'>
                    <input type='hidden' name='survey_id' value='{$surveyId}'>
                    
                    <div class='form-group'>
                        <label for='question_text'>–¢–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è:</label>
                        <textarea id='question_text' name='question_text' required rows='3'></textarea>
                    </div>
                    
                    <div class='form-row'>
                        <div class='form-group'>
                            <label for='question_type'>–¢–∏–ø –ø–∏—Ç–∞–Ω–Ω—è:</label>
                            <select id='question_type' name='question_type' required onchange='toggleOptions()'>
                                <option value=''>–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø</option>
                                <option value='radio'>–û–¥–∏–Ω –≤–∞—Ä—ñ–∞–Ω—Ç (—Ä–∞–¥—ñ–æ)</option>
                                <option value='checkbox'>–î–µ–∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ (—á–µ–∫–±–æ–∫—Å)</option>
                                <option value='text'>–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç</option>
                                <option value='textarea'>–î–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç</option>
                            </select>
                        </div>
                        
                        <div class='form-group'>
                            <label for='points'>–ë–∞–ª–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å:</label>
                            <input type='number' id='points' name='points' value='1' min='0' max='100'>
                        </div>
                    </div>
                    
                    <div class='form-group'>
                        <label>
                            <input type='checkbox' name='is_required' value='1'>
                            –û–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è
                        </label>
                    </div>
                    
                    <div id='text-answer-section' style='display: none;'>
                        <div class='form-group'>
                            <label for='correct_answer'>–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–¥–ª—è –∫–≤—ñ–∑—É):</label>
                            <input type='text' id='correct_answer' name='correct_answer' placeholder='–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å'>
                            <small>–ó–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º, —è–∫—â–æ —Ü–µ –∑–≤–∏—á–∞–π–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è</small>
                        </div>
                    </div>
                    
                    <div id='options-section' style='display: none;'>
                        <div class='form-group'>
                            <label>–í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:</label>
                            <div id='options-container'>
                                <div class='option-input'>
                                    <input type='text' name='options[]' placeholder='–í–∞—Ä—ñ–∞–Ω—Ç 1'>
                                    <label><input type='checkbox' name='correct_options[]' value='0'> –ü—Ä–∞–≤–∏–ª—å–Ω–∞</label>
                                </div>
                                <div class='option-input'>
                                    <input type='text' name='options[]' placeholder='–í–∞—Ä—ñ–∞–Ω—Ç 2'>
                                    <label><input type='checkbox' name='correct_options[]' value='1'> –ü—Ä–∞–≤–∏–ª—å–Ω–∞</label>
                                </div>
                            </div>
                            <button type='button' onclick='addOption()' class='btn btn-sm btn-secondary'>–î–æ–¥–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç</button>
                            <small>–ü–æ–∑–Ω–∞—á—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–≤—ñ–∑—É</small>
                        </div>
                    </div>
                    
                    <div class='form-actions'>
                        <button type='submit' class='btn btn-success'>–î–æ–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è</button>
                    </div>
                </form>";
    }

    private function renderEditScript(): string
    {
        return "
            <style>
                .category-management {
                    background: linear-gradient(135deg, #e8f4fd 0%, #d6eaf8 100%);
                    border: 2px solid #3498db;
                    border-radius: 12px;
                    padding: 2rem;
                    margin-bottom: 2rem;
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                }
                
                .category-management h2 {
                    color: #2980b9;
                    margin-bottom: 1.5rem;
                    font-size: 1.3rem;
                }
                
                .current-category {
                    margin-bottom: 1.5rem;
                    padding: 1rem;
                    background: rgba(255,255,255,0.7);
                    border-radius: 8px;
                }
                
                .category-display {
                    margin-top: 0.5rem;
                }
                
                .category-badge {
                    display: inline-flex;
                    align-items: center;
                    gap: 0.5rem;
                    color: white;
                    padding: 0.6rem 1.2rem;
                    border-radius: 20px;
                    font-weight: 600;
                    font-size: 1rem;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                }
                
                .category-form {
                    background: rgba(255,255,255,0.9);
                    padding: 1.5rem;
                    border-radius: 8px;
                    border: 1px solid rgba(52, 152, 219, 0.3);
                }
                
                .category-select {
                    font-size: 1rem;
                    padding: 0.8rem;
                    border: 2px solid #dee2e6;
                    border-radius: 8px;
                    background: white;
                    cursor: pointer;
                    transition: border-color 0.3s ease;
                }
                
                .category-select:focus {
                    outline: none;
                    border-color: #3498db;
                    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
                }
                
                .btn-icon {
                    margin-right: 0.5rem;
                    font-size: 1.1rem;
                }
            </style>
            
            <script>
            let optionIndex = 2;
            
            function toggleOptions() {
                const type = document.getElementById('question_type').value;
                const optionsSection = document.getElementById('options-section');
                const textAnswerSection = document.getElementById('text-answer-section');
                
                if (type === 'radio' || type === 'checkbox') {
                    optionsSection.style.display = 'block';
                    textAnswerSection.style.display = 'none';
                } else if (type === 'text' || type === 'textarea') {
                    optionsSection.style.display = 'none';
                    textAnswerSection.style.display = 'block';
                } else {
                    optionsSection.style.display = 'none';
                    textAnswerSection.style.display = 'none';
                }
            }
            
            function addOption() {
                const container = document.getElementById('options-container');
                const optionDiv = document.createElement('div');
                optionDiv.className = 'option-input';
                optionDiv.innerHTML = `
                    <input type='text' name='options[]' placeholder='–í–∞—Ä—ñ–∞–Ω—Ç \${optionIndex + 1}'>
                    <label><input type='checkbox' name='correct_options[]' value='\${optionIndex}'> –ü—Ä–∞–≤–∏–ª—å–Ω–∞</label>
                `;
                container.appendChild(optionDiv);
                optionIndex++;
            }
            
            document.addEventListener('DOMContentLoaded', function() {
                const categoryForm = document.getElementById('categoryUpdateForm');
                if (categoryForm) {
                    categoryForm.addEventListener('submit', function(e) {
                        e.preventDefault();
                        
                        const formData = new FormData(this);
                        const submitBtn = this.querySelector('button[type=\"submit\"]');
                        const originalText = submitBtn.textContent;
                        
                        submitBtn.disabled = true;
                        submitBtn.innerHTML = '‚è≥ –û–Ω–æ–≤–ª–µ–Ω–Ω—è...';
                        
                        fetch('/surveys/update-category', {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                showMessage('–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
                                setTimeout(() => {
                                    location.reload();
                                }, 1500);
                            } else {
                                showMessage('–ü–æ–º–∏–ª–∫–∞: ' + (data.message || '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫'), 'error');
                                submitBtn.disabled = false;
                                submitBtn.innerHTML = originalText;
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            showMessage('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ', 'error');
                            this.submit(); // Fallback –¥–æ –∑–≤–∏—á–∞–π–Ω–æ—ó —Ñ–æ—Ä–º–∏
                        });
                    });
                }
                
                const retakeSection = document.querySelector('.retake-management-section');
                if (retakeSection) {
                    retakeSection.style.opacity = '0';
                    retakeSection.style.transform = 'translateY(20px)';
                    
                    setTimeout(() => {
                        retakeSection.style.transition = 'all 0.5s ease';
                        retakeSection.style.opacity = '1';
                        retakeSection.style.transform = 'translateY(0)';
                    }, 500);
                }
            });
            
            function showMessage(message, type) {
                const messageDiv = document.createElement('div');
                messageDiv.className = 'flash-message ' + type;
                messageDiv.style.cssText = `
                    position: fixed; 
                    top: 20px; 
                    right: 20px; 
                    z-index: 9999;
                    padding: 1rem; 
                    border-radius: 8px; 
                    max-width: 400px;
                    font-size: 14px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
                    animation: slideInRight 0.3s ease-out;
                `;
                messageDiv.textContent = message;
                
                if (type === 'success') {
                    messageDiv.style.cssText += 'background: #d4edda; color: #155724; border: 1px solid #c3e6cb;';
                } else {
                    messageDiv.style.cssText += 'background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb;';
                }
                
                document.body.appendChild(messageDiv);
                setTimeout(() => messageDiv.remove(), 4000);
            }
        </script>";
    }
}