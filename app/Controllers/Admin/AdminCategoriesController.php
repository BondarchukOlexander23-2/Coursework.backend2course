<?php

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
 */
class AdminCategoriesController extends BaseController
{
    private AdminValidator $validator;

    public function __construct()
    {
        parent::__construct();
        $this->validator = new AdminValidator();
    }

    /**
     * –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
     */
    public function categories(): void
    {
        $this->safeExecute(function() {
            $this->requireAdmin();

            $categories = Category::getAll();

            if (!class_exists('CategoriesView')) {
                require_once __DIR__ . '/../../Views/Admin/CategoriesView.php';
            }

            $view = new CategoriesView([
                'title' => '–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏',
                'categories' => $categories
            ]);
            $content = $view->render();

            $this->responseManager
                ->setNoCacheHeaders()
                ->sendSuccess($content);
        });
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
     */
    public function createCategory(): void
    {
        $this->safeExecute(function() {
            $this->requireAdmin();

            $name = $this->postParam('name', '');
            $description = $this->postParam('description', '');
            $color = $this->postParam('color', '#3498db');
            $icon = $this->postParam('icon', 'üìã');

            $errors = $this->validateCategoryData($name, $color);

            if (!empty($errors)) {
                if ($this->isAjaxRequest()) {
                    $this->sendAjaxResponse(false, $errors, '–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó');
                } else {
                    throw new ValidationException($errors);
                }
                return;
            }

            try {
                $categoryId = Category::create($name, $description, $color, $icon);

                if ($this->isAjaxRequest()) {
                    $this->sendAjaxResponse(true, ['id' => $categoryId], '–ö–∞—Ç–µ–≥–æ—Ä—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ');
                } else {
                    $this->redirectWithMessage('/admin/categories', 'success', '–ö–∞—Ç–µ–≥–æ—Ä—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ');
                }
            } catch (Exception $e) {
                throw new DatabaseException($e->getMessage(), '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó');
            }
        });
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
     */
    public function updateCategory(): void
    {
        $this->safeExecute(function() {
            $this->requireAdmin();

            $id = (int)$this->postParam('id', 0);
            $name = $this->postParam('name', '');
            $description = $this->postParam('description', '');
            $color = $this->postParam('color', '#3498db');
            $icon = $this->postParam('icon', 'üìã');

            $errors = $this->validateCategoryData($name, $color);
            if ($id <= 0) $errors[] = '–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó';

            if (!empty($errors)) {
                if ($this->isAjaxRequest()) {
                    $this->sendAjaxResponse(false, $errors, '–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó');
                } else {
                    throw new ValidationException($errors);
                }
                return;
            }

            try {
                $updated = Category::update($id, $name, $description, $color, $icon);

                if ($this->isAjaxRequest()) {
                    $this->sendAjaxResponse($updated, null, $updated ? '–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ' : '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è');
                } else {
                    $this->redirectWithMessage('/admin/categories', $updated ? 'success' : 'error',
                        $updated ? '–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ' : '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è');
                }
            } catch (Exception $e) {
                throw new DatabaseException($e->getMessage(), '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó');
            }
        });
    }

    /**
     * –ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
     */
    public function toggleCategoryStatus(): void
    {
        $this->safeExecute(function() {
            $this->requireAdmin();

            $id = (int)$this->postParam('id', 0);

            if ($id <= 0) {
                if ($this->isAjaxRequest()) {
                    $this->sendAjaxResponse(false, ['–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'], '–ü–æ–º–∏–ª–∫–∞');
                } else {
                    $this->redirectWithMessage('/admin/categories', 'error', '–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó');
                }
                return;
            }

            try {
                $toggled = Category::toggleStatus($id);

                if ($this->isAjaxRequest()) {
                    $this->sendAjaxResponse($toggled, null, $toggled ? '–°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ' : '–ü–æ–º–∏–ª–∫–∞');
                } else {
                    $this->redirectWithMessage('/admin/categories', $toggled ? 'success' : 'error',
                        $toggled ? '–°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ' : '–ü–æ–º–∏–ª–∫–∞');
                }
            } catch (Exception $e) {
                throw new DatabaseException($e->getMessage(), '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É');
            }
        });
    }

    /**
     * –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
     */
    public function deleteCategory(): void
    {
        $this->safeExecute(function() {
            $this->requireAdmin();

            $id = (int)$this->postParam('id', 0);

            if ($id <= 1) { // –ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                if ($this->isAjaxRequest()) {
                    $this->sendAjaxResponse(false, ['–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—é'], '–ü–æ–º–∏–ª–∫–∞');
                } else {
                    $this->redirectWithMessage('/admin/categories', 'error', '–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—é');
                }
                return;
            }

            try {
                $deleted = Category::delete($id);

                if ($this->isAjaxRequest()) {
                    $this->sendAjaxResponse($deleted, null, $deleted ? '–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ' : '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
                } else {
                    $this->redirectWithMessage('/admin/categories', $deleted ? 'success' : 'error',
                        $deleted ? '–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ' : '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
                }
            } catch (Exception $e) {
                throw new DatabaseException($e->getMessage(), '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó');
            }
        });
    }

    private function validateCategoryData(string $name, string $color): array
    {
        $errors = [];

        $name = trim($name);
        if (empty($name)) {
            $errors[] = '–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ—é';
        }
        if (strlen($name) > 255) {
            $errors[] = '–ù–∞–∑–≤–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞';
        }

        if (!preg_match('/^#[0-9A-F]{6}$/i', $color)) {
            $errors[] = '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª—å–æ—Ä—É';
        }

        return $errors;
    }
}