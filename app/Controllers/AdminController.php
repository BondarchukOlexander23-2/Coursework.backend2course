<?php

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—Ä–∏–Ω—Ü–∏–ø—É Single Responsibility - —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
 */
class AdminController
{
    private AdminValidator $validator;
    private AdminService $adminService;

    public function __construct()
    {
        $this->validator = new AdminValidator();
        $this->adminService = new AdminService();
    }

    /**
     * –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
     */
    public function dashboard(): void
    {
        $this->requireAdmin();

        $stats = $this->adminService->getDashboardStats();
        $content = $this->renderDashboard($stats);
        echo $content;
    }

    /**
     * –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
     */
    public function users(): void
    {
        $this->requireAdmin();

        $page = (int)($_GET['page'] ?? 1);
        $search = trim($_GET['search'] ?? '');

        $users = $this->adminService->getUsers($page, $search);
        $totalUsers = $this->adminService->getTotalUsersCount($search);
        $totalPages = ceil($totalUsers / 20);

        $content = $this->renderUsers($users, $page, $totalPages, $search);
        echo $content;
    }

    /**
     * –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    public function deleteUser(): void
    {
        $this->requireAdmin();

        $userId = (int)($_POST['user_id'] ?? 0);
        $errors = $this->validator->validateUserDeletion($userId);

        if (!empty($errors)) {
            Session::setFlashMessage('error', implode('<br>', $errors));
            header('Location: /admin/users');
            exit;
        }

        try {
            $this->adminService->deleteUser($userId);
            Session::setFlashMessage('success', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ');
        } catch (Exception $e) {
            Session::setFlashMessage('error', '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ' . $e->getMessage());
        }

        header('Location: /admin/users');
        exit;
    }

    /**
     * –ó–º—ñ–Ω–∞ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    public function changeUserRole(): void
    {
        $this->requireAdmin();

        $userId = (int)($_POST['user_id'] ?? 0);
        $newRole = $_POST['role'] ?? '';

        $errors = $this->validator->validateRoleChange($userId, $newRole);

        if (!empty($errors)) {
            Session::setFlashMessage('error', implode('<br>', $errors));
            header('Location: /admin/users');
            exit;
        }

        try {
            $this->adminService->changeUserRole($userId, $newRole);
            Session::setFlashMessage('success', '–†–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ');
        } catch (Exception $e) {
            Session::setFlashMessage('error', '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–ª—ñ: ' . $e->getMessage());
        }

        header('Location: /admin/users');
        exit;
    }

    /**
     * –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è–º–∏
     */
    public function surveys(): void
    {
        $this->requireAdmin();

        $page = (int)($_GET['page'] ?? 1);
        $search = trim($_GET['search'] ?? '');
        $status = $_GET['status'] ?? 'all';

        $surveys = $this->adminService->getSurveys($page, $search, $status);
        $totalSurveys = $this->adminService->getTotalSurveysCount($search, $status);
        $totalPages = ceil($totalSurveys / 20);

        $content = $this->renderSurveys($surveys, $page, $totalPages, $search, $status);
        echo $content;
    }

    /**
     * –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
     */
    public function deleteSurvey(): void
    {
        $this->requireAdmin();

        $surveyId = (int)($_POST['survey_id'] ?? 0);
        $errors = $this->validator->validateSurveyDeletion($surveyId);

        if (!empty($errors)) {
            Session::setFlashMessage('error', implode('<br>', $errors));
            header('Location: /admin/surveys');
            exit;
        }

        try {
            $this->adminService->deleteSurvey($surveyId);
            Session::setFlashMessage('success', '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ');
        } catch (Exception $e) {
            Session::setFlashMessage('error', '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è: ' . $e->getMessage());
        }

        header('Location: /admin/surveys');
        exit;
    }

    /**
     * –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
     */
    public function toggleSurveyStatus(): void
    {
        $this->requireAdmin();

        $surveyId = (int)($_POST['survey_id'] ?? 0);

        try {
            $this->adminService->toggleSurveyStatus($surveyId);
            Session::setFlashMessage('success', '–°—Ç–∞—Ç—É—Å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ');
        } catch (Exception $e) {
            Session::setFlashMessage('error', '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É: ' . $e->getMessage());
        }

        header('Location: /admin/surveys');
        exit;
    }

    /**
     * –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
     */
    public function surveyStats(): void
    {
        $this->requireAdmin();

        $surveyId = (int)($_GET['id'] ?? 0);
        $survey = Survey::findById($surveyId);

        if (!$survey) {
            Session::setFlashMessage('error', '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            header('Location: /admin/surveys');
            exit;
        }

        $stats = $this->adminService->getSurveyDetailedStats($surveyId);
        $content = $this->renderSurveyStats($survey, $stats);
        echo $content;
    }

    /**
     * –ï–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    public function exportStats(): void
    {
        $this->requireAdmin();

        $type = $_GET['type'] ?? 'csv';
        $surveyId = (int)($_GET['survey_id'] ?? 0);

        try {
            $this->adminService->exportSurveyStats($surveyId, $type);
        } catch (Exception $e) {
            Session::setFlashMessage('error', '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ: ' . $e->getMessage());
            header('Location: /admin/surveys');
            exit;
        }
    }

    // === –ü–†–ò–í–ê–¢–ù–Ü –ú–ï–¢–û–î–ò ===

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    private function requireAdmin(): void
    {
        Session::requireLogin();

        if (!$this->isAdmin()) {
            Session::setFlashMessage('error', '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.');
            header('Location: /');
            exit;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω–æ–º
     */
    private function isAdmin(): bool
    {
        $userId = Session::getUserId();
        if (!$userId) {
            return false;
        }

        $user = User::findById($userId);
        return $user && $user['role'] === 'admin';
    }

    // === HTML –†–ï–ù–î–ï–†–ò–ù–ì ===

    /**
     * –†–µ–Ω–¥–µ—Ä –¥–∞—à–±–æ—Ä–¥—É
     */
    private function renderDashboard(array $stats): string
    {
        return $this->renderPage("–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", "
            <div class='admin-header'>
                <h1>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å</h1>
                " . $this->renderAdminNav() . "
            </div>
            
            <div class='dashboard-stats'>
                <div class='stats-grid'>
                    <div class='stat-card'>
                        <div class='stat-icon'>üë•</div>
                        <div class='stat-info'>
                            <h3>{$stats['total_users']}</h3>
                            <p>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</p>
                        </div>
                    </div>
                    <div class='stat-card'>
                        <div class='stat-icon'>üìã</div>
                        <div class='stat-info'>
                            <h3>{$stats['total_surveys']}</h3>
                            <p>–û–ø–∏—Ç—É–≤–∞–Ω—å</p>
                        </div>
                    </div>
                    <div class='stat-card'>
                        <div class='stat-icon'>‚úÖ</div>
                        <div class='stat-info'>
                            <h3>{$stats['active_surveys']}</h3>
                            <p>–ê–∫—Ç–∏–≤–Ω–∏—Ö</p>
                        </div>
                    </div>
                    <div class='stat-card'>
                        <div class='stat-icon'>üìä</div>
                        <div class='stat-info'>
                            <h3>{$stats['total_responses']}</h3>
                            <p>–í—ñ–¥–ø–æ–≤—ñ–¥–µ–π</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class='recent-activity'>
                <h2>–û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</h2>
                <div class='activity-list'>
                    " . $this->renderRecentActivity($stats['recent_activity']) . "
                </div>
            </div>
            
            <div class='quick-actions'>
                <h2>–®–≤–∏–¥–∫—ñ –¥—ñ—ó</h2>
                <div class='actions-grid'>
                    <a href='/admin/users' class='action-card'>
                        <div class='action-icon'>üë•</div>
                        <h3>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏</h3>
                        <p>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏, —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</p>
                    </a>
                    <a href='/admin/surveys' class='action-card'>
                        <div class='action-icon'>üìã</div>
                        <h3>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è–º–∏</h3>
                        <p>–ú–æ–¥–µ—Ä–∞—Ü—ñ—è —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–∏—Ç—É–≤–∞–Ω—å</p>
                    </a>
                </div>
            </div>
        ");
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
     */
    private function renderUsers(array $users, int $currentPage, int $totalPages, string $search): string
    {
        $usersHtml = '';
        foreach ($users as $user) {
            $roleClass = $user['role'] === 'admin' ? 'role-admin' : 'role-user';
            $roleText = $user['role'] === 'admin' ? '–ê–¥–º—ñ–Ω' : '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á';

            $usersHtml .= "
                <tr>
                    <td>{$user['id']}</td>
                    <td>" . htmlspecialchars($user['name']) . "</td>
                    <td>" . htmlspecialchars($user['email']) . "</td>
                    <td><span class='role-badge {$roleClass}'>{$roleText}</span></td>
                    <td>{$user['surveys_count']}</td>
                    <td>{$user['responses_count']}</td>
                    <td>{$user['created_at']}</td>
                    <td class='actions'>
                        " . ($user['role'] !== 'admin' ? "
                        <form method='POST' action='/admin/change-user-role' style='display: inline;'>
                            <input type='hidden' name='user_id' value='{$user['id']}'>
                            <select name='role' onchange='this.form.submit()'>
                                <option value='user'" . ($user['role'] === 'user' ? ' selected' : '') . ">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á</option>
                                <option value='admin'" . ($user['role'] === 'admin' ? ' selected' : '') . ">–ê–¥–º—ñ–Ω</option>
                            </select>
                        </form>
                        <form method='POST' action='/admin/delete-user' style='display: inline;'>
                            <input type='hidden' name='user_id' value='{$user['id']}'>
                            <button type='submit' class='btn btn-danger btn-sm' onclick='return confirm(\"–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞?\")'>–í–∏–¥–∞–ª–∏—Ç–∏</button>
                        </form>" : "<em>–°–∏—Å—Ç–µ–º–Ω–∏–π –∞–¥–º—ñ–Ω</em>") . "
                    </td>
                </tr>";
        }

        $pagination = $this->renderPagination('/admin/users', $currentPage, $totalPages, ['search' => $search]);

        return $this->renderPage("–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏", "
            <div class='admin-header'>
                <h1>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏</h1>
                " . $this->renderAdminNav() . "
            </div>
            
            <div class='admin-filters'>
                <form method='GET' action='/admin/users' class='search-form'>
                    <input type='text' name='search' placeholder='–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...' value='" . htmlspecialchars($search) . "'>
                    <button type='submit' class='btn btn-primary'>–ó–Ω–∞–π—Ç–∏</button>
                </form>
            </div>
            
            <div class='table-container'>
                <table class='admin-table'>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>–Ü–º'—è</th>
                            <th>Email</th>
                            <th>–†–æ–ª—å</th>
                            <th>–û–ø–∏—Ç—É–≤–∞–Ω—å</th>
                            <th>–í—ñ–¥–ø–æ–≤—ñ–¥–µ–π</th>
                            <th>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</th>
                            <th>–î—ñ—ó</th>
                        </tr>
                    </thead>
                    <tbody>
                        {$usersHtml}
                    </tbody>
                </table>
            </div>
            
            {$pagination}
        ");
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –æ–ø–∏—Ç—É–≤–∞–Ω—å
     */
    private function renderSurveys(array $surveys, int $currentPage, int $totalPages, string $search, string $status): string
    {
        $surveysHtml = '';
        foreach ($surveys as $survey) {
            $statusClass = $survey['is_active'] ? 'status-active' : 'status-inactive';
            $statusText = $survey['is_active'] ? '–ê–∫—Ç–∏–≤–Ω–µ' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–µ';

            $surveysHtml .= "
                <tr>
                    <td>{$survey['id']}</td>
                    <td>
                        <strong>" . htmlspecialchars($survey['title']) . "</strong><br>
                        <small>" . htmlspecialchars(substr($survey['description'], 0, 100)) . "...</small>
                    </td>
                    <td>" . htmlspecialchars($survey['author_name']) . "</td>
                    <td><span class='status-badge {$statusClass}'>{$statusText}</span></td>
                    <td>{$survey['question_count']}</td>
                    <td>{$survey['response_count']}</td>
                    <td>{$survey['created_at']}</td>
                    <td class='actions'>
                        <a href='/admin/survey-stats?id={$survey['id']}' class='btn btn-sm btn-primary'>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
                        <form method='POST' action='/admin/toggle-survey-status' style='display: inline;'>
                            <input type='hidden' name='survey_id' value='{$survey['id']}'>
                            <button type='submit' class='btn btn-sm btn-secondary'>" . ($survey['is_active'] ? '–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏' : '–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏') . "</button>
                        </form>
                        <form method='POST' action='/admin/delete-survey' style='display: inline;'>
                            <input type='hidden' name='survey_id' value='{$survey['id']}'>
                            <button type='submit' class='btn btn-danger btn-sm' onclick='return confirm(\"–í–∏–¥–∞–ª–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è?\")'>–í–∏–¥–∞–ª–∏—Ç–∏</button>
                        </form>
                    </td>
                </tr>";
        }

        $pagination = $this->renderPagination('/admin/surveys', $currentPage, $totalPages, ['search' => $search, 'status' => $status]);

        return $this->renderPage("–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è–º–∏", "
            <div class='admin-header'>
                <h1>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è–º–∏</h1>
                " . $this->renderAdminNav() . "
            </div>
            
            <div class='admin-filters'>
                <form method='GET' action='/admin/surveys' class='filter-form'>
                    <input type='text' name='search' placeholder='–ü–æ—à—É–∫ –æ–ø–∏—Ç—É–≤–∞–Ω—å...' value='" . htmlspecialchars($search) . "'>
                    <select name='status'>
                        <option value='all'" . ($status === 'all' ? ' selected' : '') . ">–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</option>
                        <option value='active'" . ($status === 'active' ? ' selected' : '') . ">–ê–∫—Ç–∏–≤–Ω—ñ</option>
                        <option value='inactive'" . ($status === 'inactive' ? ' selected' : '') . ">–ù–µ–∞–∫—Ç–∏–≤–Ω—ñ</option>
                    </select>
                    <button type='submit' class='btn btn-primary'>–§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏</button>
                </form>
            </div>
            
            <div class='table-container'>
                <table class='admin-table'>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è</th>
                            <th>–ê–≤—Ç–æ—Ä</th>
                            <th>–°—Ç–∞—Ç—É—Å</th>
                            <th>–ü–∏—Ç–∞–Ω—å</th>
                            <th>–í—ñ–¥–ø–æ–≤—ñ–¥–µ–π</th>
                            <th>–°—Ç–≤–æ—Ä–µ–Ω–æ</th>
                            <th>–î—ñ—ó</th>
                        </tr>
                    </thead>
                    <tbody>
                        {$surveysHtml}
                    </tbody>
                </table>
            </div>
            
            {$pagination}
        ");
    }

    /**
     * –†–µ–Ω–¥–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
     */
    private function renderSurveyStats(array $survey, array $stats): string
    {
        $questionsStatsHtml = '';
        foreach ($stats['questions'] as $question) {
            $questionsStatsHtml .= "
                <div class='question-stats'>
                    <h4>" . htmlspecialchars($question['question_text']) . "</h4>
                    <div class='question-metrics'>
                        <span>–í—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {$question['answers_count']}</span>
                        " . (isset($question['avg_correctness']) ? "<span>–ü—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å: {$question['avg_correctness']}%</span>" : "") . "
                    </div>
                </div>";
        }

        return $this->renderPage("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è", "
            <div class='admin-header'>
                <h1>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: " . htmlspecialchars($survey['title']) . "</h1>
                " . $this->renderAdminNav() . "
            </div>
            
            <div class='survey-overview'>
                <div class='overview-grid'>
                    <div class='overview-item'>
                        <h3>–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
                        <p><strong>–ê–≤—Ç–æ—Ä:</strong> " . htmlspecialchars($survey['author_name']) . "</p>
                        <p><strong>–°—Ç–≤–æ—Ä–µ–Ω–æ:</strong> {$survey['created_at']}</p>
                        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> " . ($survey['is_active'] ? '–ê–∫—Ç–∏–≤–Ω–µ' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–µ') . "</p>
                    </div>
                    <div class='overview-item'>
                        <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                        <p><strong>–ü–∏—Ç–∞–Ω—å:</strong> {$stats['general']['total_questions']}</p>
                        <p><strong>–í—ñ–¥–ø–æ–≤—ñ–¥–µ–π:</strong> {$stats['general']['total_responses']}</p>
                        <p><strong>–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</strong> {$stats['general']['unique_users']}</p>
                    </div>
                </div>
            </div>
            
            <div class='stats-charts'>
                <h2>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∏—Ç–∞–Ω–Ω—è—Ö</h2>
                {$questionsStatsHtml}
            </div>
            
            <div class='export-actions'>
                <h2>–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö</h2>
                <a href='/admin/export-stats?survey_id={$survey['id']}&type=csv' class='btn btn-primary'>–ï–∫—Å–ø–æ—Ä—Ç CSV</a>
                <a href='/admin/export-stats?survey_id={$survey['id']}&type=xlsx' class='btn btn-secondary'>–ï–∫—Å–ø–æ—Ä—Ç Excel</a>
            </div>
            
            <div class='form-actions'>
                <a href='/admin/surveys' class='btn btn-secondary'>–ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É</a>
                <a href='/surveys/view?id={$survey['id']}' class='btn btn-primary'>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è</a>
            </div>
        ");
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω–∞
     */
    private function renderAdminNav(): string
    {
        return "
            <nav class='admin-nav'>
                <a href='/admin' class='admin-nav-link'>–î–∞—à–±–æ—Ä–¥</a>
                <a href='/admin/users' class='admin-nav-link'>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</a>
                <a href='/admin/surveys' class='admin-nav-link'>–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è</a>
                <a href='/surveys' class='admin-nav-link'>–î–æ —Å–∞–π—Ç—É</a>
                <a href='/logout' class='admin-nav-link'>–í–∏–π—Ç–∏</a>
            </nav>";
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
     */
    private function renderPagination(string $baseUrl, int $currentPage, int $totalPages, array $params = []): string
    {
        if ($totalPages <= 1) {
            return '';
        }

        $paginationHtml = '<div class="pagination">';

        // –ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        if ($currentPage > 1) {
            $prevParams = array_merge($params, ['page' => $currentPage - 1]);
            $prevUrl = $baseUrl . '?' . http_build_query($prevParams);
            $paginationHtml .= "<a href='{$prevUrl}' class='page-link'>‚Üê –ü–æ–ø–µ—Ä–µ–¥–Ω—è</a>";
        }

        // –ù–æ–º–µ—Ä–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        for ($i = max(1, $currentPage - 2); $i <= min($totalPages, $currentPage + 2); $i++) {
            $pageParams = array_merge($params, ['page' => $i]);
            $pageUrl = $baseUrl . '?' . http_build_query($pageParams);
            $activeClass = $i === $currentPage ? ' active' : '';
            $paginationHtml .= "<a href='{$pageUrl}' class='page-link{$activeClass}'>{$i}</a>";
        }

        // –ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        if ($currentPage < $totalPages) {
            $nextParams = array_merge($params, ['page' => $currentPage + 1]);
            $nextUrl = $baseUrl . '?' . http_build_query($nextParams);
            $paginationHtml .= "<a href='{$nextUrl}' class='page-link'>–ù–∞—Å—Ç—É–ø–Ω–∞ ‚Üí</a>";
        }

        $paginationHtml .= '</div>';
        return $paginationHtml;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
     */
    private function renderRecentActivity(array $activities): string
    {
        if (empty($activities)) {
            return '<p>–ù–µ–º–∞—î –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ</p>';
        }

        $html = '';
        foreach ($activities as $activity) {
            $html .= "
                <div class='activity-item'>
                    <div class='activity-icon'>{$activity['icon']}</div>
                    <div class='activity-content'>
                        <p>{$activity['description']}</p>
                        <small>{$activity['time']}</small>
                    </div>
                </div>";
        }

        return $html;
    }

    /**
     * –ë–∞–∑–æ–≤–∏–π —Ä–µ–Ω–¥–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    private function renderPage(string $title, string $content): string
    {
        $flashSuccess = Session::getFlashMessage('success');
        $flashError = Session::getFlashMessage('error');

        $flashHtml = '';
        if ($flashSuccess) {
            $flashHtml .= "<div class='flash-message success'>{$flashSuccess}</div>";
        }
        if ($flashError) {
            $flashHtml .= "<div class='flash-message error'>{$flashError}</div>";
        }

        return "
        <!DOCTYPE html>
        <html lang='uk'>
        <head>
            <meta charset='UTF-8'>
            <meta name='viewport' content='width=device-width, initial-scale=1.0'>
            <title>{$title}</title>
            <link rel='stylesheet' href='/assets/css/style.css'>
            <link rel='stylesheet' href='/assets/css/admin.css'>
        </head>
        <body class='admin-body'>
            <div class='admin-container'>
                {$flashHtml}
                {$content}
            </div>
        </body>
        </html>";
    }
}